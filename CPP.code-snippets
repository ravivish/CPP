{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "mycpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"typedef unsigned long long ull;",
			"typedef long long ll;",
			"#define mod 1000000007",
			"#define fo(i,n) for(int i=0;i<n;i++)",
			"#define Fo(i,k,n) for(int i=k;i<n;i++)",
			"#define all(x) (x).begin(),(x).end()",
			"#define vi vector<int>",
			"#define vl vector<ll>",
			"#define pi pair<int,int>",
			"#define deb(x) cout << #x << x << endl;",			
			"#define Accepted 0",
			"#define pb push_back",
			"#define mp make_pair",
			"#define sz(x) (int)(x.size())",
			"#define F first",
			"#define S second",
			"#define lb lower_bound",
			"#define ub upper_bound",
			"#define For(i,x,y)  for (ll i = x; i <= y; i ++) ",
			"#define FOr(i,x,y)  for (ll i = x; i >= y; i --)",
			"#define SpeedForce ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0)",
			"",
			"",
			"int t[1002][1002];",
			"",
			"auto clk=clock();",
			"mt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());",
			"int rng(int lim) {",
				"uniform_int_distribution<int> uid(0,lim-1);",
					"return uid(rang);",
			"}",
			"void solve() {",
			"",
			"}",
			"",
			"int main() {",			
			"SpeedForce;",			
			"//memset(t,-1,sizeof(t));",
			"cout<<fixed;",
            "cout<<setprecision(10);",
			"//int testcase;",
			"//cin>>testcase;",
			"//for(int i=1;i<=testcase;++i){",
				"solve();",
			"//}",
			"return Accepted;",
			"}",
		],
		"description": "Template for competitive Coding"
	}
}
